{"version":3,"file":"main.71b66f3a00e29e62de6c.hot-update.js","sources":["webpack:///src/screens/Settings/index.js"],"sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { cx } from 'emotion'\nimport { connect } from 'react-redux'\n\nimport Container from '../../components/Container'\nimport Spinner from '../../components/Spinner'\nimport Text from '../../components/Text'\nimport Button from '../../components/Button'\nimport EditSettingsForm from './EditSettingsForm'\n\nimport API from '../../api'\nimport { getAuthUser } from '../../store/actions/auth'\n\nimport styles from './styles'\nimport { colors } from '../../styles'\n\nconst SettingsBody = ({ user }) => {\n  return (\n    <Container style={styles.settingsBodyContainer}>\n      <Container style={styles.settingsItemContainer}>\n        <Text tag='h5' style={styles.settingsItemLabel}>Username</Text>\n        <Text tag='h5' style={styles.settingsItemValue}>{user.username}</Text>\n      </Container>\n      <Container style={styles.settingsItemContainer}>\n        <Text tag='h5' style={styles.settingsItemLabel}>Email</Text>\n        <Text tag='h5' style={styles.settingsItemValue}>{user.email}</Text>\n      </Container>\n      <Container style={styles.settingsItemContainer}>\n        <Text tag='h5' style={styles.settingsItemLabel}>Password</Text>\n        <Text tag='h5' style={styles.settingsItemValue}>Change <i className={`icon ion-md-create ${cx(styles.verifiedIcon)}`} /></Text>\n      </Container>\n      <Container style={styles.settingsItemContainer}>\n        <Text tag='h5' style={styles.settingsItemLabel}>Email Verification</Text>\n        {user.active\n          ? <Text tag='h5' style={styles.settingsItemValue}>Verified <i className={`icon ion-md-checkmark-circle-outline ${cx(styles.verifiedIcon)}`} /></Text>\n          : <Button secondary style={styles.editSettingsButton}>Resend Email<i className={`icon ion-md-arrow-round-forward ${cx(styles.editIcon)}`} /></Button>}\n      </Container>\n    </Container>\n  )\n}\n\nclass Settings extends Component {\n  state = {\n    isEditing: false\n  }\n\n  _renderLoading = () => {\n    return (\n      <Container style={styles.loadingContainer}>\n        <Spinner size={50} width={7} color={colors.lightText} />\n      </Container>\n    )\n  }\n\n  onEdit = () => {\n    this.setState({ isEditing: true })\n  }\n\n  onCancelEdit = () => {\n    this.setState({ isEditing: false })\n  }\n\n  async onEditSubmit (values, bag) {\n    const userDetails = {\n      username: values.username\n    }\n    if (values.password) {\n      userDetails['password'] = values.password\n    }\n\n    try {\n      const data = await API.updateUser(userDetails)\n      bag.setSubmitting(false)\n      this.props.getAuthUser(data)\n      this.setState({ isEditing: false })\n    } catch (e) {\n      bag.setSubmitting(false)\n      bag.setErrors(API.setErrors(e.response.data.errors.details.errors))\n    }\n  }\n\n  _renderUserDetails = (user) => {\n    return (\n      <React.Fragment>\n        <Container style={styles.settingsHeaderContainer}>\n          <Text tag='h4' style={styles.settingsHeaderTextStyle}>Settings</Text>\n          {\n            this.state.isEditing\n              ? <Button onClick={this.onCancelEdit} style={styles.editSettingsButton} secondary>Cancel<i className={`icon ion-md-close ${cx(styles.editIcon)}`} /></Button>\n              : <Button onClick={this.onEdit} style={styles.editSettingsButton} primary>Edit<i className={`icon ion-md-arrow-round-forward ${cx(styles.editIcon)}`} /></Button>\n          }\n        </Container>\n        {\n          this.state.isEditing\n            ? <EditSettingsForm user={user} onCancel={this.onCancelEdit} onSubmit={this.onEditSubmit} />\n            : <SettingsBody user={user} />\n        }\n      </React.Fragment>\n    )\n  }\n  render () {\n    return (\n      <Container fluid style={styles.mainContainer}>\n        <Container style={styles.cardContainer}>\n          {this.props.user ? this._renderUserDetails(this.props.user) : this._renderLoading()}\n        </Container>\n      </Container>\n    )\n  }\n}\n\nSettings.propTypes = {\n  getAuthUser: PropTypes.func,\n  user: PropTypes.object\n}\n\nSettingsBody.propTypes = {\n  user: PropTypes.object\n}\n\nconst mapStateToProps = (state) => ({\n  user: state.auth.user\n})\n\nexport default connect(mapStateToProps, { getAuthUser })(Settings)\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAbA;AAqBA;AACA;AACA;;;;;;;;;;;;;;AACA;AACA;AADA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAIA;AAGA;AACA;AAGA;AACA;AAsBA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AASA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAZA;AAgBA;;;;;;AArCA;;;;;;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;;;AAEA;AACA;;AADA;AACA;AAAA;AACA;AACA;;;;;;;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;AAsBA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AADA;AAMA;;;;AAnEA;AACA;AAqEA;AACA;AACA;AAFA;AACA;AAIA;AACA;AADA;AACA;AAGA;AAAA;AACA;AADA;AAAA;AACA;AAGA;;;;A","sourceRoot":""}