{"version":3,"file":"main.8a6a09a2f56f56cc77fe.hot-update.js","sources":["webpack:///src/screens/UserProfile/index.js"],"sourcesContent":["/* global FileReader */\n/* global FormData */\n\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { cx } from 'emotion'\nimport { connect } from 'react-redux'\nimport { Link } from 'react-router-dom'\n\nimport Container from '../../components/Container'\nimport Spinner from '../../components/Spinner'\nimport Text from '../../components/Text'\nimport Button from '../../components/Button'\nimport EditProfileForm from './EditProfileForm'\n\nimport API from '../../api'\nimport { getAuthUser } from '../../store/actions/auth'\n\nimport styles from './styles'\nimport { colors } from '../../styles'\n\nclass UserProfile extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      selectedProfileImage: null,\n      selectedProfileImageBinary: null,\n      isSubmittingAvatar: false\n    }\n\n    this.handleAvatarSubmit = this.handleAvatarSubmit.bind(this)\n    this.handleProfileSubmit = this.handleProfileSubmit.bind(this)\n  }\n\n  _renderLoading = () => {\n    return (\n      <Container style={styles.loadingContainer}>\n        <Spinner size={50} width={7} color={colors.lightText} />\n      </Container>\n    )\n  }\n\n  fileChangeHandler = (event) => {\n    if (event.target.files && event.target.files[0]) {\n      this.setState({ selectedProfileImageBinary: event.target.files[0] })\n      let reader = new FileReader()\n      reader.onload = (e) => {\n        this.setState({ selectedProfileImage: e.target.result })\n      }\n      reader.readAsDataURL(event.target.files[0])\n    }\n  }\n\n  async handleAvatarSubmit () {\n    this.setState({ isSubmittingAvatar: true })\n    try {\n      const formData = new FormData()\n      formData.append('avatar', this.state.selectedProfileImageBinary, this.state.selectedProfileImageBinary.name)\n      const user = await API.updateUser(formData)\n      this.setState({\n        selectedProfileImage: null,\n        selectedProfileImageBinary: null,\n        isSubmittingAvatar: false\n      })\n      this.props.getAuthUser(user)\n    } catch (e) {\n      this.setState({ isSubmittingAvatar: false })\n    }\n  }\n\n  async handleProfileSubmit (values, bag) {\n    try {\n      const data = await API.updateUser(values)\n      bag.setSubmitting(false)\n      this.props.getAuthUser(data)\n    } catch (e) {\n      console.log(e)\n      bag.setSubmitting(false)\n      bag.setErrors(API.setErrors(e.response.data.errors.details.errors))\n    }\n  }\n\n  onAvatarCancel = () => {\n    this.setState({ selectedProfileImage: null })\n  }\n\n  getUserImage = (user) => {\n    if (this.state.selectedProfileImage) {\n      return this.state.selectedProfileImage\n    }\n    if (user.avatar) {\n      return user.avatar\n    }\n\n    return 'https://res.cloudinary.com/bitcharge/image/upload/v1535940305/panda-avatar.png'\n  }\n\n  _renderUserDetails = (user) => {\n    return (\n      <React.Fragment>\n        <Container style={styles.avatarContainer}>\n          <Container style={styles.editImageContainer}>\n            <img alt='user-avatar' className={cx(styles.avatarIconStyle)} src={this.getUserImage(user)} />\n            <input type='file' id='profileImage' accept='image/*' className={cx(styles.inputStyle)} onChange={this.fileChangeHandler} />\n            <label htmlFor='profileImage' className={cx(styles.editImageIconContainer)}><svg className='mdi-icon ' width='14' height='14' fill='white' viewBox='0 0 24 24'><path d='M4,4H7L9,2H15L17,4H20C21.1,4 22,4.9 22,6V18C22,19.1 21.1,20 20,20H4C2.9,20 2,19.1 2,18V6C2,4.9 2.9,4 4,4M12,7C9.24,7 7,9.24 7,12C7,14.76 9.24,17 12,17C14.76,17 17,14.76 17,12C17,9.24 14.76,7 12,7M12,9C13.66,9 15,10.34 15,12C15,13.66 13.66,15 12,15C10.34,15 9,13.66 9,12C9,10.34 10.34,9 12,9Z' /></svg></label>\n          </Container>\n        </Container>\n        <Container style={styles.headerTextContainer}>\n          <Text tag='h5' style={styles.headerNameTextStyle}>{user.name}</Text>\n          <Text tag='h6' style={styles.headerUsernameTextStyle}>{user.username}</Text>\n        </Container>\n        { this.state.selectedProfileImage && (\n          <Container style={styles.editAvatarOptionsContainer}>\n            <Button\n              primary\n              onClick={this.handleAvatarSubmit}\n              style={styles.editProfileButton}\n              disabled={this.state.isSubmittingAvatar}\n              type='submit'\n            >\n              Save {this.state.isSubmittingAvatar && <span className={cx(styles.spinnerIcon)}><Spinner size={18} width={4} /></span>}\n            </Button>\n            <Button\n              onClick={this.onAvatarCancel}\n              style={styles.editProfileButton}\n              disabled={this.state.isSubmittingAvatar}\n              link\n            >\n              Cancel\n            </Button>\n          </Container>\n        )}\n        <Container style={styles.detailsContainer}>\n          <Container style={styles.profileHeaderContainer}>\n            <Text tag='h5' style={styles.profileHeaderTextStyle}>My Profile</Text>\n            <Button tag={Link} to={`/${user.username}`} target='_blank' style={styles.editProfileButton} secondary>View Profile<i className={`icon ion-md-person ${cx(styles.editIcon)}`} /></Button>\n          </Container>\n          <EditProfileForm user={user} onSubmit={this.handleProfileSubmit} />\n        </Container>\n      </React.Fragment>\n    )\n  }\n  render () {\n    return (\n      <Container fluid style={styles.mainContainer}>\n        <Container style={styles.cardContainer}>\n          {this.props.user ? this._renderUserDetails(this.props.user) : this._renderLoading()}\n        </Container>\n      </Container>\n    )\n  }\n}\n\nUserProfile.propTypes = {\n  user: PropTypes.object,\n  getAuthUser: PropTypes.func\n}\n\nconst mapStateToProps = (state) => ({\n  user: state.auth.user\n})\n\nexport default connect(mapStateToProps, { getAuthUser })(UserProfile)\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AADA;AAcA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAIA;AACA;AApBA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/BA;AA8DA;AACA;AACA;AAhEA;AAkEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3EA;AA6EA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AADA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AASA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAVA;AAoBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AAAA;AAAA;AALA;AAjCA;AA0CA;AACA;AAtHA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AAVA;AAWA;AACA;;;;;;;;;;AAqBA;;AAEA;AACA;AAAA;;AACA;AACA;;AADA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;;;;;;;;AAEA;AACA;;;;;;;;;;;;;;;;;;AAGA;;;;;;;;AAEA;AACA;;AADA;AACA;AAAA;AACA;;;;;;;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AA+DA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AADA;AAMA;;;;AAlIA;AACA;AAoIA;AACA;AACA;AAFA;AACA;AAIA;AAAA;AACA;AADA;AAAA;AACA;AAGA;;;;A","sourceRoot":""}