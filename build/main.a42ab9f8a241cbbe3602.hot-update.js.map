{"version":3,"file":"main.a42ab9f8a241cbbe3602.hot-update.js","sources":["webpack:///src/screens/Profile/index.js"],"sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { cx } from 'emotion'\nimport Select from 'react-select'\nimport QRCode from 'qrcode.react'\nimport { Link } from 'react-router-dom'\nimport { Helmet } from 'react-helmet'\n\nimport API from '../../api'\nimport Container from '../../components/Container'\nimport Text from '../../components/Text'\nimport Navbar from '../../components/Navbar'\nimport Footer from '../../components/Footer'\nimport Spinner from '../../components/Spinner'\nimport Button from '../../components/Button'\n\nimport SingleValue from './SingleValue'\nimport DropdownItem from './DropdownItem'\n\nimport styles from './styles'\nimport { colors } from '../../styles'\n\nconst selectStyles = {\n  control: base => ({ ...base, ...styles.selectStyle }),\n  container: base => ({ ...base, width: '100%' }),\n  indicatorsContainer: base => ({ ...base, transition: 'all 0.3s ease-out' }),\n  indicatorSeparator: base => ({ ...base, backgroundColor: '#FFF' }),\n  dropdownIndicator: base => ({ ...base, color: '#000' }),\n  menu: base => ({ ...base, marginTop: '1px', border: 0, borderRadius: 0 }),\n  option: base => ({ ...styles.dropdownItemStyle }),\n  singleValue: base => ({ ...styles.singleValueStyle }),\n  valueContainer: base => ({ ...base, padding: 0 })\n}\n\nclass Profile extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      isLoading: true,\n      isError: false,\n      user: null,\n      selectedAddress: null,\n      copiedAddress: false\n    }\n  }\n\n  static getInitialData ({match, req, res}) {\n    console.log('match', match)\n    return API.getProfile(match.params.username)\n  }\n\n  onCopyAddress = () => {\n    this.setState({ copied: true })\n    setInterval(() => {\n      this.setState({ copied: false })\n    }, 3000)\n  }\n\n  async componentDidMount () {\n    try {\n      const data = await API.getProfile(this.props.match.params.username)\n      this.setState({ isLoading: false, user: data })\n    } catch (e) {\n      this.setState({ isLoading: false, isError: true })\n    }\n  }\n\n  onDropdownItemPress = (value) => {\n    this.setState({ selectedAddress: value })\n  }\n\n  _renderCardBody = (addresses) => {\n    const { selectedAddress } = this.state\n\n    if (!addresses || !addresses.length) {\n      return (\n        <Container style={styles.cardBodyContainer}>\n          <Container fluid style={styles.bodyDataContainer}>\n            <Container style={styles.addressContainer}>\n              <Container style={styles.noAddressImageContainer}>\n                <img className={cx(styles.noAddressImage)} src='https://res.cloudinary.com/bitcharge/image/upload/v1536110953/assets/building-profile.png' />\n              </Container>\n              <Text tag='h5' style={styles.noAddressText}>This profile is still in progress. No addresses added yet.</Text>\n            </Container>\n          </Container>\n        </Container>\n      )\n    }\n\n    const addressList = Object.keys(addresses).map(address => addresses[address]).sort((a, b) => {\n      const textA = a.currency.name.toUpperCase()\n      const textB = b.currency.name.toUpperCase()\n\n      return textA.localeCompare(textB)\n    })\n\n    const addressText = selectedAddress ? selectedAddress.address : addresses[0].address\n    return (\n      <Container style={styles.cardBodyContainer}>\n        <Select\n          options={addressList}\n          defaultValue={addressList[0]}\n          isSearchable={false}\n          components={{ Option: DropdownItem, SingleValue }}\n          getOptionLabel={({ currency }) => currency.name}\n          getOptionValue={({ currency }) => currency.symbol}\n          styles={selectStyles}\n          onChange={this.onDropdownItemPress}\n        />\n        <Container fluid style={styles.bodyDataContainer}>\n          <Container style={styles.addressContainer}>\n            <Text tag='h5' style={styles.addressHeaderStyle}>Wallet Address</Text>\n            <Text tag='h6' style={styles.addressValueText}>{addressText}</Text>\n          </Container>\n          <Container style={styles.qrcodeContainer}>\n            <QRCode value={addressText} size={172} />\n          </Container>\n        </Container>\n      </Container>\n    )\n  }\n\n  _renderUser = (user) => {\n    return (\n      <React.Fragment>\n        <Container style={styles.cardHeaderContainer}>\n          <Container style={styles.avatarContainer}>\n            <img alt='user-avatar' className={cx(styles.avatarIconStyle)} src={user.avatar || 'https://res.cloudinary.com/bitcharge/image/upload/v1535940305/panda-avatar.png'} />\n          </Container>\n          <Container style={styles.headerTextContainer}>\n            <Text tag='h5' unstyled style={styles.headerTextStyle}>{user.name}</Text>\n            <Text tag='h6' unstyled style={styles.headerSubTextStyle}>{user.intro || user.username}</Text>\n          </Container>\n        </Container>\n        {this._renderCardBody(user.addresses)}\n      </React.Fragment>\n    )\n  }\n\n  _renderLoading = () => {\n    return (\n      <Container style={styles.loadingContainer}>\n        <Spinner size={50} width={7} color={colors.lightText} />\n      </Container>\n    )\n  }\n\n  _renderError = () => {\n    return (\n      <React.Fragment>\n        <Container style={styles.cardErrorHeaderContainer}>\n          <Container style={styles.errorHeaderTextContainer}>\n            <Text tag='h3' unstyled style={styles.errorHeaderTextStyle}>We couldn't find that Bitcharge profile</Text>\n          </Container>\n        </Container>\n        <Container style={styles.errorUserContainer}>\n          <Container style={styles.noAddressImageContainer}>\n            <img className={cx(styles.errorUserImage)} src='https://res.cloudinary.com/bitcharge/image/upload/v1536119853/assets/user-not-found.png' />\n          </Container>\n          <Text tag='h6' style={styles.errorUserText}>Seems like nobody has a Bitcharge profile with that username, try checking the link again. You can also create your own Bitcharge profile with this username. </Text>\n          <Button tag={Link} to='/signup' primary style={styles.getStartedButton}>Create My Profile <i className={`icon ion-md-arrow-round-forward ${styles.getStartedButtonIcon}`} /></Button>\n        </Container>\n      </React.Fragment>\n    )\n  }\n\n  _renderCard = () => {\n    if (this.state.isLoading) {\n      return this._renderLoading()\n    }\n\n    if (this.state.user) {\n      return this._renderUser(this.state.user)\n    }\n\n    if (this.state.isError) {\n      return this._renderError()\n    }\n  }\n\n  getMetaTags = (user) => {\n    const firstName = user.name.split(' ')[0]\n    return (\n      <Helmet>\n        <meta property='og:title' content={`Pay ${firstName} in crypto with Bitcharge`} />\n        <meta property='og:description' content={`Go to bitcharge.co/${user.username} to pay ${firstName} in your favourite cryptocurrency.`} />\n        <meta property='og:image' content='https://res.cloudinary.com/bitcharge/image/upload/v1536051435/assets/bitcharge-social-graph.png' />\n        <meta property='og:image:alt' content='Bitcharge' />\n        <meta property='og:url' content={`https://bitcharge.co/${user.username}`} />\n      </Helmet>\n    )\n  }\n\n  render () {\n    const { user } = this.state\n    return (\n      <Container fluid fullHeight style={styles.mainContainer}>\n        {user && this.getMetaTags(user)}\n        <Navbar />\n        <Container fluid style={styles.bodyContainer}>\n          <Container style={styles.cardContainer}>\n            {this._renderCard()}\n          </Container>\n        </Container>\n        <Footer />\n      </Container>\n    )\n  }\n}\n\nProfile.propTypes = {\n  match: PropTypes.any\n}\n\nexport default Profile\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AATA;AACA;AAWA;;;AACA;AAAA;AACA;AADA;AACA;AADA;AAkBA;AACA;AACA;AACA;AACA;AACA;AAvBA;AAkCA;AACA;AACA;AApCA;AAqsBA;AACA;AAvFA;AAyFA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAJA;AASA;AAVA;AAaA;AACA;AAxGA;AA0GA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAIA;AACA;AAhHA;AAkHA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AANA;AAeA;AACA;AAnIA;AAqIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjJA;AAmJA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAQA;AACA;AA3JA;AACA;AACA;AACA;AACA;AACA;AALA;AAHA;AAUA;AACA;;;;;;;;;;;;AAeA;AACA;;AADA;AACA;AAAA;;;;;;;;AAEA;AACA;;;;;;;;;;;;;;;;;AAiIA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AADA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AARA;AAWA;;;AAjKA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;;;;AAhBA;AACA;AAgLA;AACA;AADA;AACA;AAGA;;;;A","sourceRoot":""}