{"version":3,"file":"main.b935211d2992c17bc8f0.hot-update.js","sources":["webpack:///src/api/index.js"],"sourcesContent":["import axios from 'axios'\n\nconst PUBLIC_URI = process.env.NODE_ENV === 'production'\n  ? process.env.PUBLIC_URL\n  : 'http://localhost:8080'\n\nclass API {\n  constructor () {\n    this.axios = axios.create({\n      baseURL: `${PUBLIC_URI}/api`\n    })\n  }\n\n  setErrors = (errors) => {\n    let errorObj = {}\n    if (errors && Object.keys(errors).length) {\n      Object.keys(errors).forEach((error) => {\n        errorObj[error] = errors[error].msg\n      })\n    }\n\n    return errorObj\n  }\n\n  setAuthHeader = (token) => {\n    this.axios.defaults.headers.common['Authorization'] = `bearer ${token}`\n  }\n\n  removeAuthHeader = () => {\n    delete this.axios.defaults.headers.common['Authorization']\n  }\n\n  signup = (userDetails) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const response = await this.axios.post('/signup', userDetails)\n        return resolve(response.data)\n      } catch (error) {\n        return reject(error)\n      }\n    })\n  }\n\n  confirmEmail = (code) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const response = await this.axios.post(`/confirm`, { confirmationCode: code })\n        return resolve(response)\n      } catch (error) {\n        return reject(error)\n      }\n    })\n  }\n\n  login = (userDetails) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const response = await this.axios.post('/login', userDetails)\n        return resolve(response.data)\n      } catch (error) {\n        return reject(error)\n      }\n    })\n  }\n\n  addAddress = (addressDetails) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const response = await this.axios.post('/addresses', addressDetails)\n        return resolve(response.data)\n      } catch (error) {\n        return reject(error)\n      }\n    })\n  }\n\n  getCurrencies = () => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const response = await this.axios.get('/currencies')\n        return resolve(response.data)\n      } catch (error) {\n        return reject(error)\n      }\n    })\n  }\n\n  updateUser = (details) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const response = await this.axios.put('/profile', details)\n        return resolve(response.data)\n      } catch (error) {\n        return reject(error)\n      }\n    })\n  }\n\n  verifyEmail = () => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const response = await this.axios.get('/verify/email')\n        return resolve(response.data)\n      } catch (error) {\n        return reject(error)\n      }\n    })\n  }\n\n  getAuthUser = () => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const response = await this.axios.get('/profile')\n        return resolve(response.data)\n      } catch (error) {\n        return reject(error)\n      }\n    })\n  }\n\n  getAddresses = () => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const response = await this.axios.get('/addresses')\n        return resolve(response.data)\n      } catch (error) {\n        return reject(error)\n      }\n    })\n  }\n\n  updateAddress = (addressDetails) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const response = await this.axios.put(`/addresses/${addressDetails.currency.symbol}`, { address: addressDetails.address })\n        return resolve(response.data)\n      } catch (error) {\n        return reject(error)\n      }\n    })\n  }\n\n  deleteAddress = (address) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const response = await this.axios.delete(`/addresses/${address.currency.symbol}`)\n        return resolve(response.data)\n      } catch (error) {\n        return reject(error)\n      }\n    })\n  }\n\n  getProfile = (username) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const response = await this.axios.get(`${username}`)\n        return resolve(response.data)\n      } catch (e) {\n        return reject(e)\n      }\n    })\n  }\n}\n\nexport default new API()\n"],"mappings":"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","sourceRoot":""}