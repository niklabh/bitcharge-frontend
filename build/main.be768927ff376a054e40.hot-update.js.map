{"version":3,"file":"main.be768927ff376a054e40.hot-update.js","sources":["webpack:///src/screens/SignupConfirmation/index.js"],"sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport posed from 'react-pose'\nimport { cx } from 'emotion'\nimport qs from 'qs'\n\nimport Container from '../../components/Container'\nimport Text from '../../components/Text'\nimport Button from '../../components/Button'\n\nimport { confirmEmail as confirmEmailAction } from '../../store/actions/auth'\nimport API from '../../api'\n\nimport styles from './styles'\n\nconst SignupConfirming = ({ hostRef }) => {\n  return (\n    <Container hostRef={hostRef} style={styles.confirmationContainer}>\n      <Text tag='h1' style={styles.confirmationHeaderText}>We are confirming your email...</Text>\n    </Container>\n  )\n}\n\nconst SignupConfirmationError = ({ hostRef, isAuthenticated, handleVerify, resentVerification }) => {\n  return (\n    <Container hostRef={hostRef} style={styles.confirmationContainer}>\n      <Text tag='h1' style={styles.confirmationHeaderText}>Something went wrong</Text>\n      <Text tag='h5'>Something went wrong while verifying your email. {isAuthenticated\n        ? `Try resending the verification email`\n        : `Login to resend the verification email.`}</Text>\n      <Container style={styles.buttonContainer}>\n        {isAuthenticated\n          ? <Button tag={Link} to='/address/new' primary style={styles.submitButton}>Resend Verifcation</Button>\n          : <Button tag={Link} to='/login' primary style={styles.submitButton}>Login Now</Button>\n        }\n        {isAuthenticated && <Button tag={Link} to='/profile' link style={styles.cancelButton}>Skip</Button>}\n      </Container>\n      {(resentVerification.action && resentVerification.success) && <Text tag='h5' style={styles.resentVerificationText}>Verification mail sent successfully.</Text> }\n    </Container>\n  )\n}\n\nconst SignupConfirmed = ({ hostRef, isAuthenticated }) => {\n  return (\n    <Container hostRef={hostRef} style={styles.confirmationContainer}>\n      <Text tag='h1' style={styles.confirmationHeaderText}>Woohoo! You're all set.</Text>\n      <Text tag='h5' style={styles.confirmationInfoText}>Thank you for verifying your account. {isAuthenticated\n        ? `You can now start adding your addresses.`\n        : `You need to login to start adding your addresses.`}\n      </Text>\n      <Container style={styles.buttonContainer}>\n        {isAuthenticated\n          ? <Button tag={Link} to='/address/new' primary style={styles.submitButton}>Add an Address</Button>\n          : <Button tag={Link} to='/login' primary style={styles.submitButton}>Login Now</Button>\n        }\n        {isAuthenticated && <Button tag={Link} to='/profile' link style={styles.cancelButton}>Skip</Button>}\n      </Container>\n    </Container>\n  )\n}\n\nconst SignupConfirmationExpired = ({ hostRef, isAuthenticated, handleVerify, resentVerification }) => {\n  const { action, success, error } = resentVerification\n  return (\n    <Container hostRef={hostRef} style={styles.confirmationContainer}>\n      <Text tag='h1' style={styles.confirmationHeaderText}>Something went wrong</Text>\n      <Text tag='h5'>Your verification email is expired. {isAuthenticated\n        ? `Try resending the verification email`\n        : `Login to resend the verification email.`}</Text>\n      <Container style={styles.buttonContainer}>\n        {isAuthenticated\n          ? <Button onClick={this.handleVerify} primary style={styles.submitButton} disabled={(action && !(success || error))}>Resend Verifcation</Button>\n          : <Button tag={Link} to='/login' primary style={styles.submitButton}>Login Now</Button>\n        }\n      </Container>\n      {(action && success) && <Text tag='h5' style={styles.resentVerificationText}>Verification mail sent successfully.</Text> }\n    </Container>\n  )\n}\n\nclass SignupConfirmation extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      isConfirmed: false,\n      isConfirming: false,\n      isExpired: false,\n      isError: false,\n      resentVerification: false,\n      resentVerificationSuccess: false,\n      resentVerificationError: false\n    }\n\n    this.resendVerificationMail = this.resendVerificationMail.bind(this)\n  }\n\n  async componentDidMount () {\n    const query = qs.parse(this.props.location.search.split('?')[1])\n    try {\n      const response = await API.confirmEmail(query.confirmationCode)\n      this.setState({ isConfirming: false })\n      if (response) {\n        this.setState({ isConfirmed: true })\n        this.props.confirmEmailAction(true)\n      }\n    } catch (error) {\n      this.setState({ isConfirming: false })\n      if (error.response.status === 410) {\n        this.setState({ isExpired: true })\n      }\n      this.setState({ isError: true })\n    }\n  }\n\n  async resendVerificationMail () {\n    try {\n      await API.verifyEmail()\n      this.setState({ resentVerification: true })\n    } catch (e) {\n      console.log(e)\n      this.setState({ resentVerification: true, resentVerificationError: true })\n    }\n  }\n\n  render () {\n    const PoseSignupConfirming = posed(SignupConfirming)({\n      visible: { opacity: 1 },\n      invisible: { opacity: 0, display: 'none' }\n    })\n\n    const PoseSignupConfirmed = posed(SignupConfirmed)({\n      visible: { opacity: 1 },\n      invisible: { opacity: 0, display: 'none' }\n    })\n\n    const PoseSignupConfirmError = posed(SignupConfirmationError)({\n      visible: { opacity: 1 },\n      invisible: { opacity: 0, display: 'none' }\n    })\n\n    const PoseSignupConfirmExpired = posed(SignupConfirmationExpired)({\n      visible: { opacity: 1 },\n      invisible: { opacity: 0, display: 'none' }\n    })\n\n    const resentVerification = {\n      action: true,\n      success: this.state.resentVerificationSuccess,\n      error: this.state.resentVerificationError\n    }\n    return (\n      <Container fluid style={styles.mainContainer}>\n        <Container style={styles.heroContainer}>\n          <Container style={styles.heroLogoContainer}>\n            <a href='/'><img alt='bitcharge-logo' className={cx(styles.logoImageStyle)} src='https://res.cloudinary.com/bitcharge/image/upload/v1532990484/icons/bitcharge-logo-white.png' /></a>\n          </Container>\n          <Container style={styles.heroTextContainer}>\n            <img className={cx(styles.heroAvatarIconStyle)} alt='signup-confirmation-avatar' src='https://res.cloudinary.com/bitcharge/image/upload/v1535940306/fox-avatar.png' />\n            <Text tag='h3' style={styles.heroText}>You're almost there.</Text>\n          </Container>\n          { !this.props.isAuthenticated && (\n            <Container style={styles.heroFooterContainer}>\n              <Text tag='h6'>Already have an account. <Link to='/login' className={cx(styles.LoginLink)}>Login</Link></Text>\n            </Container>\n          )\n          }\n        </Container>\n        <Container style={styles.bodyContainer}>\n          <PoseSignupConfirming pose={this.state.isConfirming ? 'visible' : 'invisible'} />\n          <PoseSignupConfirmed pose={this.state.isConfirmed ? 'visible' : 'invisible'} isAuthenticated={this.props.isAuthenticated} />\n          <PoseSignupConfirmError pose={this.state.isError ? 'visible' : 'invisible'} isAuthenticated={this.props.isAuthenticated} handleVerify={this.resendVerificationMail} resentVerification={resentVerification} />\n          <PoseSignupConfirmExpired pose={this.state.isExpired ? 'visible' : 'invisible'} isAuthenticated={this.props.isAuthenticated} handleVerify={this.resendVerificationMail} resentVerification={resentVerification} />\n        </Container>\n      </Container>\n    )\n  }\n}\n\nSignupConfirmed.propTypes = {\n  hostRef: PropTypes.any,\n  isAuthenticated: PropTypes.bool\n}\n\nSignupConfirming.propTypes = {\n  hostRef: PropTypes.any\n}\n\nSignupConfirmationError.propTypes = {\n  hostRef: PropTypes.any\n}\n\nSignupConfirmationExpired.propTypes = {\n  hostRef: PropTypes.any,\n  isAuthenticated: PropTypes.bool,\n  handleVerify: PropTypes.func,\n  resentVerification: PropTypes.func\n}\n\nSignupConfirmation.propTypes = {\n  location: PropTypes.any,\n  confirmEmailAction: PropTypes.func,\n  isAuthenticated: PropTypes.bool,\n  handleVerify: PropTypes.func,\n  resentVerification: PropTypes.func\n}\n\nconst mapStateToProps = (state) => ({\n  isAuthenticated: state.auth.isAuthenticated\n})\n\nexport default connect(mapStateToProps, { confirmEmailAction })(SignupConfirmation)\n"],"mappings":"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","sourceRoot":""}