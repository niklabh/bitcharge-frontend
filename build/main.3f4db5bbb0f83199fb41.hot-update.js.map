{"version":3,"file":"main.3f4db5bbb0f83199fb41.hot-update.js","sources":["webpack:///src/screens/Settings/EditSettingsForm/index.js","webpack:///src/screens/Settings/index.js","webpack:///src/screens/Settings/styles.js"],"sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Formik } from 'formik'\nimport * as Yup from 'yup'\nimport { cx } from 'emotion'\n\nimport Container from '../../../components/Container'\nimport Text from '../../../components/Text'\nimport Button from '../../../components/Button'\nimport Input from '../../../components/Input'\n\nimport styles from '../styles'\n\nconst validationSchema = Yup.object().shape({\n  username: Yup.string()\n    .min(2),\n  password: Yup.string()\n    .min(6)\n})\n\nconst EditSettingsForm = ({ onSubmit, onCancel, user }) => {\n  return (\n    <Formik\n      initialValues={{ username: user.username, password: '' }}\n      onSubmit={onSubmit}\n      validationSchema={validationSchema}\n      render={({\n        values,\n        handleChange,\n        handleSubmit,\n        handleBlur,\n        errors,\n        touched,\n        isValid,\n        isSubmitting\n      }) => {\n        return (\n          <Container style={styles.settingsBodyContainer}>\n            <Container style={styles.settingsItemContainer}>\n              <Text tag='h5' style={styles.settingsItemLabel}>Username</Text>\n              <Input\n                name='username'\n                noErrorText\n                inputStyle={styles.textInputStyle}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.username}\n                error={touched.username && errors.username}\n              />\n            </Container>\n            <Container style={styles.settingsItemContainer}>\n              <Text tag='h5' style={styles.settingsItemLabel}>Email</Text>\n              <Text tag='h5' style={styles.settingsItemValue}>{user.email}</Text>\n            </Container>\n            <Container style={styles.settingsItemContainer}>\n              <Text tag='h5' style={styles.settingsItemLabel}>Password</Text>\n              <Input\n                name='password'\n                noErrorText\n                inputStyle={styles.textInputStyle}\n                type='password'\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.password}\n                error={touched.password && errors.password}\n              />\n            </Container>\n            <Container style={styles.settingsItemContainer}>\n              <Text tag='h5' style={styles.settingsItemLabel}>Email Verification</Text>\n              {user.active\n                ? <Text tag='h5' style={styles.settingsItemValue}>Verified <i className={`icon ion-md-checkmark-circle-outline ${cx(styles.verifiedIcon)}`} /></Text>\n                : <Button secondary style={styles.editSettingsButton}>Resend Email<i className={`icon ion-md-arrow-round-forward ${cx(styles.editIcon)}`} /></Button>}\n            </Container>\n            <Container style={cx(styles.settingsItemContainer, styles.editButtonContainer)}>\n              <Button\n                primary\n                disabled={!isValid || isSubmitting}\n                onClick={handleSubmit}\n                style={styles.editAddressSaveButton}\n                type='submit'\n              >\n                Save\n              </Button>\n              <Button\n                onClick={onCancel}\n                style={styles.editAddressCancelButton}\n                link\n              >\n                Cancel\n              </Button>\n            </Container>\n          </Container>\n        )\n      }} />\n  )\n}\n\nEditSettingsForm.propTypes = {\n  onSubmit: PropTypes.func,\n  onCancel: PropTypes.func,\n  user: PropTypes.object\n}\n\nexport default EditSettingsForm\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { cx } from 'emotion'\nimport { connect } from 'react-redux'\n\nimport Container from '../../components/Container'\nimport Spinner from '../../components/Spinner'\nimport Text from '../../components/Text'\nimport Button from '../../components/Button'\nimport EditSettingsForm from './EditSettingsForm'\n\nimport API from '../../api'\nimport { getAuthUser } from '../../store/actions/auth'\n\nimport styles from './styles'\nimport { colors } from '../../styles'\n\nconst SettingsBody = ({ user }) => {\n  return (\n    <Container style={styles.settingsBodyContainer}>\n      <Container style={styles.settingsItemContainer}>\n        <Text tag='h5' style={styles.settingsItemLabel}>Username</Text>\n        <Text tag='h5' style={styles.settingsItemValue}>{user.username}</Text>\n      </Container>\n      <Container style={styles.settingsItemContainer}>\n        <Text tag='h5' style={styles.settingsItemLabel}>Email</Text>\n        <Text tag='h5' style={styles.settingsItemValue}>{user.email}</Text>\n      </Container>\n      <Container style={styles.settingsItemContainer}>\n        <Text tag='h5' style={styles.settingsItemLabel}>Password</Text>\n        <Text tag='h5' style={styles.settingsItemValue}>Change <i className={`icon ion-md-create ${cx(styles.verifiedIcon)}`} /></Text>\n      </Container>\n      <Container style={styles.settingsItemContainer}>\n        <Text tag='h5' style={styles.settingsItemLabel}>Email Verification</Text>\n        {user.active\n          ? <Text tag='h5' style={styles.settingsItemValue}>Verified <i className={`icon ion-md-checkmark-circle-outline ${cx(styles.verifiedIcon)}`} /></Text>\n          : <Button secondary style={styles.editSettingsButton}>Resend Email<i className={`icon ion-md-arrow-round-forward ${cx(styles.editIcon)}`} /></Button>}\n      </Container>\n    </Container>\n  )\n}\n\nclass Settings extends Component {\n  state = {\n    isEditing: false\n  }\n\n  _renderLoading = () => {\n    return (\n      <Container style={styles.loadingContainer}>\n        <Spinner size={50} width={7} color={colors.lightText} />\n      </Container>\n    )\n  }\n\n  onEdit = () => {\n    this.setState({ isEditing: true })\n  }\n\n  onCancelEdit = () => {\n    this.setState({ isEditing: false })\n  }\n\n  async onEditSubmit (values, bag) {\n    const userDetails = {\n      username: values.username\n    }\n    if (values.password) {\n      userDetails['password'] = values.password\n    }\n\n    console.log(userDetails)\n\n    try {\n      const data = await API.updateUser(userDetails)\n      bag.setSubmitting(false)\n      this.props.getAuthUser(data)\n      this.setState({ isEditing: false })\n    } catch (e) {\n      console.log(e)\n      bag.setSubmitting(false)\n      bag.setErrors(API.setErrors(e.response.data.errors.details.errors))\n    }\n  }\n\n  _renderUserDetails = (user) => {\n    return (\n      <React.Fragment>\n        <Container style={styles.settingsHeaderContainer}>\n          <Text tag='h4' style={styles.settingsHeaderTextStyle}>Settings</Text>\n          {\n            this.state.isEditing\n              ? <Button onClick={this.onCancelEdit} style={styles.editSettingsButton} secondary>Cancel<i className={`icon ion-md-close ${cx(styles.editIcon)}`} /></Button>\n              : <Button onClick={this.onEdit} style={styles.editSettingsButton} primary>Edit<i className={`icon ion-md-arrow-round-forward ${cx(styles.editIcon)}`} /></Button>\n          }\n        </Container>\n        {\n          this.state.isEditing\n            ? <EditSettingsForm user={user} onCancel={this.onCancelEdit} onSubmit={this.onEditSubmit} />\n            : <SettingsBody user={user} />\n        }\n      </React.Fragment>\n    )\n  }\n  render () {\n    return (\n      <Container fluid style={styles.mainContainer}>\n        <Container style={styles.cardContainer}>\n          {this.props.user ? this._renderUserDetails(this.props.user) : this._renderLoading()}\n        </Container>\n      </Container>\n    )\n  }\n}\n\nSettings.propTypes = {\n  getAuthUser: PropTypes.func,\n  user: PropTypes.object\n}\n\nSettingsBody.propTypes = {\n  user: PropTypes.object\n}\n\nconst mapStateToProps = (state) => ({\n  user: state.auth.user\n})\n\nexport default connect(mapStateToProps, { getAuthUser })(Settings)\n","import { css } from 'react-emotion'\nimport { colors, breakpoints } from '../../styles'\n\nconst mainContainer = css`\n  width: 100%;\n  min-height: calc(100vh - 4.5em);\n  align-items: center;\n  border-bottom: 1px solid ${colors.lightGray};\n`\n\nconst cardContainer = css`\n  width: 50em;\n  margin-top: 3em;\n  margin-bottom: 3em;\n  background-color: ${colors.white};\n  border-radius: 4px;\n  padding: 2em 3em;\n\n  @media (max-width: ${breakpoints.tablet}) {\n    width: 100%;\n    margin: 0;\n    border-radius: 0;\n    padding: 1.5em;\n  }\n`\n\nconst loadingContainer = css`\n  align-items: center;\n  justify-content: center;\n  padding: 5em;\n`\n\nconst settingsHeaderContainer = css`\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  padding-bottom: 1em;\n  border-bottom: .5px dashed ${colors.defaultBorder};\n`\n\nconst settingsHeaderTextStyle = css`\n  font-weight: 600;\n  margin-bottom: -0.4em;\n`\n\nconst editSettingsButton = css`\n  font-weight: 600;\n  font-size: 1em;\n`\n\nconst editIcon = css`\n  margin-left: 0.75em;\n`\n\nconst verifiedIcon = css`\n  margin-left: 0.3em;\n`\n\nconst settingsBodyContainer = css`\n  margin-top: 1em;\n`\n\nconst settingsItemContainer = css`\n  padding: 2em 0 2em 0;\n  border-bottom: .5px dotted ${colors.defaultBorder};\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n\n  &:last-child {\n    border-bottom: 0;\n  }\n\n  @media (max-width: ${breakpoints.mobile}) {\n    flex-direction: column;\n    align-items: flex-start;\n    padding: 1em 0;\n  }\n`\n\nconst editButtonContainer = css`\n  justify-content: flex-end;\n\n  @media (max-width: ${breakpoints.tablet}) {\n    flex-direction: row;\n  }\n`\n\nconst settingsItemValue = css`\n  font-weight: 500;\n\n  @media (max-width: ${breakpoints.tablet}) {\n    font-size: 1em;\n  }\n`\n\nconst settingsItemLabel = css`\n  @media (max-width: ${breakpoints.tablet}) {\n    font-size: 1em;\n}\n`\n\nconst textInputStyle = css`\n  width: 70%;\n  margin-left: auto;\n  margin-right: -1em;\n\n  @media (max-width: ${breakpoints.tablet}) {\n    width: 100%;\n    margin-right: 0;\n  }\n`\n\nconst editAddressSaveButton = css`\n@media (max-width: ${breakpoints.tablet}) {\n  font-size: 1em;\n}\n`\n\nconst editAddressCancelButton = css`\n  @media (max-width: ${breakpoints.tablet}) {\n    font-size: 1em;\n  }\n`\n\nconst styles = {\n  mainContainer,\n  cardContainer,\n  loadingContainer,\n  settingsHeaderContainer,\n  settingsHeaderTextStyle,\n  editSettingsButton,\n  editAddressSaveButton,\n  editAddressCancelButton,\n  settingsBodyContainer,\n  editButtonContainer,\n  editIcon,\n  verifiedIcon,\n  settingsItemContainer,\n  settingsItemLabel,\n  settingsItemValue,\n  textInputStyle\n}\n\nexport default styles\n"],"mappings":"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","sourceRoot":""}